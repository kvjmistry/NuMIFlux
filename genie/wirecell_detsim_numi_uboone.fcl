#include "services_microboone.fcl"
#include "detsimmodules_microboone.fcl"
#include "triggersim_microboone.fcl"
#include "opticaldetectorsim_microboone.fcl"
#include "time_memory_tracker_microboone.fcl"
#include "swtrigger_microboone.fcl"
#include "wcls.fcl"

process_name: Detsim

services:
{
  scheduler:    { defaultExceptions: false }    # Make all uncaught exceptions fatal.
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "detsim_hist.root" }
  TimeTracker:             @local::microboone_time_tracker
  MemoryTracker:           @local::microboone_memory_tracker
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::microboone_detsim_services
}

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  10        # Number of events to create
  saveMemoryObjectThreshold: 0
  inputCommands: ["keep *_*_*_*", "drop *_*_*_Detsim*","drop *_*_*_McReco*" ]

}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   optdigitizer:   @local::microboone_optical_adc_sim
   optfem:         @local::microboone_optical_fem_sim
   triggersim:     @local::ubtrigger_dark_numi
   pmtreadout:     @local::microboone_optical_dram_readout_sim
   #daq:            @local::microboone_simwire
   driftWC:        @local::wcls.driftsim
   rns:            { module_type: "RandomNumberSaver" }
 }

 filters: { swtrigger: @local::microboone_swtrigger_mc_numi }
 
 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 #simulate: [ rns, optdigitizer, optfem, triggersim, pmtreadout, daq, driftWC, swtrigger ]
 simulate: [ rns, optdigitizer, optfem, triggersim, pmtreadout, driftWC, swtrigger ]
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_%tc_detsim.root"
   dataTier:    "detector-simulated"
   saveMemoryObjectThreshold: 0
   compressionLevel: 1
   fastCloning: false
   outputCommands: [ "keep *_*_*_*", "drop optdata::ChannelDataGroup_*_*_*" ]
 }
}

# Adjust the window/offset for the reduced total frame size (9600 -> 6400 ticks)
services.DetectorPropertiesService.NumberTimeSamples: 9600
services.DetectorPropertiesService.ReadOutWindowSize: 9600
services.DetectorClocksService.InheritClockConfig:    false
services.DetectorClocksService.TriggerOffsetTPC:      -1600

# Add the lines necessary for a NuMI analysis.
physics.producers.triggersim:    @local::ubtrigger_dark_numi
physics.filters.swtrigger:       @local::microboone_swtrigger_mc_numi

outputs.out1.fileName: "%ifb_%tc_detsim_numi.root"
